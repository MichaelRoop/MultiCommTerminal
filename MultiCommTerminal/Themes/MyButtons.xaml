<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:MultiCommTerminal.NetCore.UserControls"
	>

    <!-- Button with rounded corners -->
    <Style x:Key="RoundEdgeButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="85"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Foreground" Value="#004c8c"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="buttonBorder" CornerRadius="10" Background="Transparent" 
                            BorderBrush="#004c8c"  BorderThickness="1" Padding="10,0" >
                        <TextBlock x:Name="buttonText" Text="{TemplateBinding Content}" 
                            VerticalAlignment="Center" HorizontalAlignment="Center" TextTrimming="CharacterEllipsis" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Useful when using a mouse. Set general opacity -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Opacity" Value="1" />
                        </Trigger>
                        <!-- Useful when just doing touch screen. Note: must set different properties than IsMouseOver -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="buttonBorder" Property="Opacity" Value=".5" />
                            <Setter TargetName="buttonText" Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="buttonBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="buttonText" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Button with rounded corners and an icon on the left -->
    <Style x:Key="TextIconButton" TargetType="{x:Type controls:UC_IconButton}">
        <!--<Setter Property="MinWidth" Value="35"/>-->
        <Setter Property="Height" Value="35"/>
        <Setter Property="Foreground" Value="#004c8c"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="IconMargin" Value="7"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:UC_IconButton}">
                    <!-- TODO If the border H Alignment is Center it can resize down but cannot be set on entry as both same size. works with stretch but not downsize -->
                    <!-- Bind the border background to the button background to capture click event -->
                    <Border x:Name="tiButtonBorder" CornerRadius="3" BorderBrush="#004c8c" BorderThickness=".25" Background="{TemplateBinding Background}" >
                        <Grid Margin="10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center">
                                <!--Pad image seperately since the Content already is padded-->
                                <Border x:Name="imageBorder" Padding="{TemplateBinding IconMargin}">
                                    <Image Source="{TemplateBinding IconSource}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                           RenderOptions.BitmapScalingMode="HighQuality" RenderOptions.EdgeMode="Aliased" />
                                </Border>
                                <TextBlock x:Name="buttonText" Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"
                                           TextTrimming="CharacterEllipsis"/>
                            </DockPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Useful when using a mouse. Set general opacity -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Opacity" Value="1" />
                        </Trigger>
                        <!-- Useful when just doing touch screen. Note: must set different properties than IsMouseOver -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="tiButtonBorder" Property="Opacity" Value=".4" />
                            <Setter TargetName="buttonText" Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="tiButtonBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="buttonText" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Button with rounded corners and an icon on the left -->
    <Style x:Key="RoundIconButton" TargetType="{x:Type controls:UC_RoundIconButton}">
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Foreground" Value="#004c8c"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="IconPadding" Value="8"/>
        <Setter Property="ButtonCornerRadius" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:UC_RoundIconButton}">
                    <Border x:Name="tiButtonBorder" CornerRadius="{TemplateBinding ButtonCornerRadius}" BorderBrush="#004c8c" BorderThickness="1" Background="{TemplateBinding Background}" >
                        <Grid>
                            <DockPanel HorizontalAlignment="Center" VerticalAlignment="Center" >
                                <Border x:Name="imageBorder" Margin="{TemplateBinding IconPadding}" >
                                    <Image x:Name="icon" Source="{TemplateBinding IconSource}"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" 
                                       RenderOptions.BitmapScalingMode="HighQuality" RenderOptions.EdgeMode="Aliased" />
                                </Border>
                            </DockPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--Useful when using a mouse. Set general opacity-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Opacity" Value="1" />
                        </Trigger>
                        <!--Useful when just doing touch screen. Note: must set different properties than IsMouseOver-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="tiButtonBorder" Property="Opacity" Value=".4" />
                            <Setter TargetName="icon" Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="tiButtonBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="icon" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Button with an icon and not border -->
    <Style x:Key="IconButton" TargetType="{x:Type controls:UC_RoundIconButton}">
        <Setter Property="Width" Value="15"/>
        <Setter Property="Height" Value="15"/>
        <Setter Property="Foreground" Value="#004c8c"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="IconPadding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:UC_RoundIconButton}">
                    <Border x:Name="tiButtonBorder" Background="{TemplateBinding Background}" >
                        <Grid>
                            <DockPanel HorizontalAlignment="Center" VerticalAlignment="Center" >
                                <Border x:Name="imageBorder" Margin="{TemplateBinding IconPadding}" >
                                    <Image x:Name="icon" Source="{TemplateBinding IconSource}"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" 
                                       RenderOptions.BitmapScalingMode="HighQuality" RenderOptions.EdgeMode="Aliased" />
                                </Border>
                            </DockPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--Useful when using a mouse. Set general opacity-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Opacity" Value="1" />
                        </Trigger>
                        <!--Useful when just doing touch screen. Note: must set different properties than IsMouseOver-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="tiButtonBorder" Property="Opacity" Value=".4" />
                            <Setter TargetName="icon" Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="tiButtonBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="icon" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--  Temp to test -->
    <!-- https://www.eidias.com/blog/2012/2/20/customizing-wpf-combo-box-style  -->
    <!-- Style="{Binding Source={StaticResource CustomToggleButton}}" -->


    <!--<ControlTemplate x:Key="CustomToggleButton" TargetType="ToggleButton">
        --><!-- No idea what this is about --><!--
        <Grid Background="#004c8c" Margin="50">
            <Border Name="Border" BorderThickness="10" BorderBrush="Brown" />
            <Border Name="SmallBorder" BorderThickness="10" BorderBrush="Green" />
            --><!--<Path Name="Arrow" Width="40" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"  Fill="Yellow" />--><!--
        </Grid>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    --><!-- this is the border around each item in the list --><!--
                    <Border BorderThickness="0" BorderBrush="Transparent">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Template="{StaticResource CustomToggleButton}" />
                        <ContentPresenter />
                        <TextBox/>
                        <Popup>
                            <Grid>
                                <Border BorderThickness="5" BorderBrush="Black" Background="Green">
                                    <ScrollViewer>
                                        <ItemsPresenter />
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->





</ResourceDictionary>