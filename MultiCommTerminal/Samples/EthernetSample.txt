
/*
 Name:		ArduinoEthernetTCP.ino
 Created:	11/6/2020 1:43:57 PM
 Author:	Michael

 Tested against Arduino Uno with Arduino Ethernet Shield

 Ethernet Shield attached to pins 10,11,12,13

 Note: The SECIONT ndefines are used to collapse sections in Visual Studio (Visual Micro)

*/
#include <IPAddress.cpp>
#include <Ethernet.h>

#ifndef SECTION_Data

byte mac[] = { 0x00, 0xAA, 0xBB, 0xCC, 0xDA, 0x02 };
// This is the IP and Service (port) that will be exposed. Use it when connecting
IPAddress ip(192, 168, 1, 88);
unsigned localPort = 9999;


#define IN_BUFF_SIZE 50
#define MSG_COMP_BUFF 50
char inBuff[IN_BUFF_SIZE];
char msgCmpBuff[IN_BUFF_SIZE];
int msgSize = 0;
unsigned char inIndex = 0;

char OPEN_DOOR_CMD_REV[] = "OpenDoor";
char CLOSE_DOOR_CMD_REV[] = "CloseDoor";
char OPEN_DOOR_CMD[] = "OpenDoor";
char CLOSE_DOOR_CMD[] = "CloseDoor";
int  OPEN_CMD_LEN = 8;
int CLOSE_CMD_LEN = 9;

EthernetServer server(localPort);

#endif // !SECTION_Data

#ifndef SECTION_ArduinoCode

// the setup function runs once when you press reset or power the board
void setup() {
    StartSerial(115200);
	StartEthernet(mac, ip);
}

// the loop function runs over and over again until power down or reset
void loop() {
	ListenForData();
}

#endif // !SECTION_ArduinoCode


#ifndef SECTION_TCPFunctions

/// <summary>Fire up the Ethernet connection</summary>
/// <param name="macAddress">The MAC address</param>
/// <param name="ipAddress">The IP address</param>
void StartEthernet(uint8_t* macAddress, IPAddress ipAddress) {
    Ethernet.begin(mac, ip);

    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
        Serial.println("Ethernet shield not found.  Hardware required");
        HangProgram();
    }
    else if (Ethernet.linkStatus() == LinkOFF) {
        Serial.println("Ethernet cable is not connected. Connect and power cycle Arduino");
        HangProgram();
    }
    else {
        Serial.println("Ethernet TCP successfuly setup");
        DebugPrintEthernetInfo();
    }
}


void DebugPrintEthernetInfo() {
    Serial.print("Local TCP Info:");
    PrintOutIpAddress(Ethernet.localIP(), localPort);
}


void PrintOutIpAddress(IPAddress ipAddress, unsigned port) {
    for (int i = 0; i < 4; i++) {
        Serial.print(ipAddress[i], DEC);
        if (i < 3) {
            Serial.print(".");
        }
    }
    Serial.print(", port ");
    Serial.println(port);
}


#endif // !SECTION_TCPFunctions


#ifndef SECTION_DataHandling


void ListenForData() {
	// Listen for incoming client connections
	EthernetClient client = server.available();
	int bytesAvailable = 0;
	if (client) {
		Serial.print("Client Connected:");
		PrintOutIpAddress(client.remoteIP(), client.remotePort());
		while (client.connected()) {
			bytesAvailable = client.available();
			if (bytesAvailable > 0) {
				Serial.print("Received "); Serial.print(bytesAvailable); Serial.println(" bytes");
				msgSize = 0;

				// Error check to avoid overrun of buffer
				if ((inIndex + bytesAvailable) > IN_BUFF_SIZE) {
					Blink();
					Serial.println("Overrun buffer. Purging all");
					SendTCPResponse(&client, "ERROR-PURGING INPUT\r\n");
					inIndex = 0;
					continue;
				}

				size_t count = client.readBytes(&inBuff[inIndex], bytesAvailable);
				inIndex += count;

				for (int i = 0; i < inIndex; i++) {
					// Make assumption that \n\r comming in so look for \r for end
					if (i > 1) {
						if (inBuff[i - 1] == '\r' && inBuff[i] == '\n') {
							msgSize = i - 1;
							memset(msgCmpBuff, 0, MSG_COMP_BUFF);
							memcpy(msgCmpBuff, inBuff, msgSize);
							memmove(inBuff, &inBuff[i + 1], (inIndex + count) - (msgSize + 2));
							inIndex -= msgSize + 2;
							memset(&inBuff[inIndex], 0, (IN_BUFF_SIZE - inIndex));
							CompareForResponse(&client, msgSize);
						}
					}
				}
			}
		}
		Serial.println("Client Disconnected");
	}
}


//#define DUMP_TO_BROWSER

void SendTCPResponse(EthernetClient* client,  char* msg) {
#ifdef DUMP_TO_BROWSER
	client->println("HTTP/1.1 200 OK");
	client->println("Content-Type: text/html");
	client->println();
	client->println("<!DOCTYPE html>");
	client->print("<html>");
	client->print("<h1>");
	client->print(msg);
	client->print("</h1>");
	client->print("</body>");
	client->println("</html>");
#else
	Serial.print(msg);
	client->write(msg);
	client->flush();
#endif // DUMP_TO_BROWSER
}



/// <summary>Compare the incoming message to carry out IO actions</summary>
/// <param name="msgSize">Size of the incoming message</param>
void CompareForResponse(EthernetClient* client, int msgSize) {

	// Compare from start of buffer. Garbage at end of Command
	// and before terminator is ignored (OpenDoorlsdlfkdjdflj)
	if (strncmp(msgCmpBuff, OPEN_DOOR_CMD, OPEN_CMD_LEN) == 0) {
		Blink();
		SendTCPResponse(client, "OPENING\r\n");
		OpenGarageDoor();
	}
	else if (strncmp(msgCmpBuff, CLOSE_DOOR_CMD, CLOSE_CMD_LEN) == 0) {
		Blink();
		SendTCPResponse(client, "CLOSING\r\n");
		CloseGarageDoor();
	}
	else {
		// Reverse the incoming buffer. This will ignore garbage 
		// at start of legit command (sdfsdfsOpenDoor)
		strrev(msgCmpBuff);
		if (strncmp(msgCmpBuff, OPEN_DOOR_CMD_REV, OPEN_CMD_LEN) == 0) {
			SendTCPResponse(client, "OPENING\r\n");
			OpenGarageDoor();
		}
		else if (strncmp(msgCmpBuff, CLOSE_DOOR_CMD_REV, CLOSE_CMD_LEN) == 0) {
			Blink();
			SendTCPResponse(client, "CLOSING\r\n");
			CloseGarageDoor();
		}
		else {
			Blink();
			SendTCPResponse(client, "NOT_HANDLED\r\n");
		}
	}
}


void OpenGarageDoor() {
	// Do you IO stuff here to open the door
}


void CloseGarageDoor() {
	// Do you IO stuff here to close the door
}




#endif // !SECTION_DataHandling

#ifndef SECTION_Other

/// <summary>Used to stop program from advancing</summary>
void HangProgram() {
    Serial.println("** Critical Error - The program is suspended **");
    while (true) {
        delay(1);
    }
}

void StartSerial(unsigned long baud) {
    Serial.begin(baud);
    while (!Serial) {
        ; // wait for default serial port to connect. Needed for Native USB only
    }
    Serial.println("Debug serial active - ArduinoEthernetTCP");
}

// So user can tell device is sending back stuff
void Blink() {
	digitalWrite(LED_BUILTIN, HIGH);
	delay(1);
	digitalWrite(LED_BUILTIN, LOW);
}

#endif // !SECTION_Other
