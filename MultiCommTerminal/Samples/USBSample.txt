
Two samples included
First is the Garage Door Dummy Project

Second is a program to connect to send AT commands to your HC-05 Bluetooth
Module via a USB connection to the default serial port on the Arduino

==================================================================================
START OF FIRST PROGRAM
==================================================================================

/*
   Name:		ArduinoUSB.ino
   Created:	11/1/2020 2:37:44 PM
   Author:	Michael

   Tested on an Arduino Uno using the default serial port
   You can apply the same code to boards with multiple serial
   ports by specifying the exact serial port

   When set in Arduino (see below), the terminal should set itself to: 
		Baud 115,200, 8 Data bits, 1 Stop bit, no parity

*/
#define IN_BUFF_SIZE 50
#define MSG_COMP_BUFF 50
char inBuff[IN_BUFF_SIZE];
char msgCmpBuff[IN_BUFF_SIZE];
int msgSize = 0;
unsigned char inIndex = 0;

char OPEN_DOOR_CMD_REV[] = "OpenDoor";
char CLOSE_DOOR_CMD_REV[] = "CloseDoor";
char OPEN_DOOR_CMD[] = "OpenDoor";
char CLOSE_DOOR_CMD[] = "CloseDoor";
int  OPEN_CMD_LEN = 8;
int CLOSE_CMD_LEN = 9;


// the setup function runs once when you press reset or power the board
void setup() {
	// 115,200 Baud, 8 Data bits, no parity, 1 stop bit
	// The terminal should find those same parameters. If you do not set
	// it here, the values are not detected in the terminal
	Serial.begin(115200, SERIAL_8N1);
	while (!Serial) {
	}

	// Reverse the compare strings so we can filter out leading garbage in inputs
	strrev(OPEN_DOOR_CMD_REV);
	strrev(CLOSE_DOOR_CMD_REV);
}



// the loop function runs over and over again until power down or reset
void loop() {
	ListenForData();
}


void ListenForData() {
	int available = Serial.available();
	if (available > 0) {
		msgSize = 0;

		// Error check to avoid overrun of buffer
		if ((inIndex + available) > IN_BUFF_SIZE) {
			Serial.write("ERROR-PURGING INPUT\r\n");
			inIndex = 0;
			return;
		}

		size_t count = Serial.readBytes(&inBuff[inIndex], available);
		inIndex += count;

		for (int i = 0; i < inIndex; i++) {
			// Make assumption that \n\r comming in so look for \r for end
			if (i > 1) {
				if (inBuff[i-1] == '\r' && inBuff[i] == '\n') {
					msgSize = i - 1;
					memset(msgCmpBuff, 0, MSG_COMP_BUFF);
					memcpy(msgCmpBuff, inBuff, msgSize);
					memmove(inBuff , &inBuff[i + 1] , (inIndex + count) - (msgSize + 2));
					inIndex -= msgSize + 2;
					memset(&inBuff[inIndex], 0, (IN_BUFF_SIZE - inIndex));
					CompareForResponse(msgSize);
				}
			}
		}
	}
}


/// <summary>Compare the incoming message to carry out IO actions</summary>
/// <param name="msgSize">Size of the incoming message</param>
void CompareForResponse(int msgSize) {

	// Compare from start of buffer. Garbage at end of Command
	// and before terminator is ignored (OpenDoorlsdlfkdjdflj)
	if (strncmp(msgCmpBuff, OPEN_DOOR_CMD, OPEN_CMD_LEN) == 0) {
		Serial.write("OPENING\r\n");
		OpenGarageDoor();
	}
	else if (strncmp(msgCmpBuff, CLOSE_DOOR_CMD, CLOSE_CMD_LEN) == 0) {
		Serial.write("CLOSING\r\n");
		CloseGarageDoor();
	}
	else {
		// Reverse the incoming buffer. This will ignore garbage 
		// at start of legit command (sdfsdfsOpenDoor)
		strrev(msgCmpBuff);
		if (strncmp(msgCmpBuff, OPEN_DOOR_CMD_REV, OPEN_CMD_LEN) == 0) {
			Serial.write("OPENING\r\n");
			OpenGarageDoor();
		}
		else if (strncmp(msgCmpBuff, CLOSE_DOOR_CMD_REV, CLOSE_CMD_LEN) == 0) {
			Serial.write("CLOSING\r\n");
			CloseGarageDoor();
		}
		else {
			Serial.write("NOT_HANDLED\r\n");
		}
	}
}


void OpenGarageDoor() {
	// Do you IO stuff here to open the door
}


void CloseGarageDoor() {
	// Do you IO stuff here to close the door
}

==================================================================================
END OF FIRST PROGRAM
==================================================================================


==================================================================================
START OF SECOND PROGRAM
==================================================================================

/*
 Name:		ArduinoSerial_BT_AT_Cmds.ino
 Created:	11/11/2020 1:08:41 PM
 Author:	Michael

 To enable the Multi Comm Terminal to send AT commands to the 
 HC-05 module

 Module must be set to CMD via switch.  
 If the module is software switched I will need to add 
 that in a command

  Written and tested in Visual Studio using Visual Micro
 Tested against Arduino Uno and itea Bluetooth shield with HC-05 module

 MUST HAVE BOARD TOGGLED TO CMD
 MUST HAVE BOARD JUMPERS SET FOLLOWING for IO4 TX and IO5 RX
 °°°|°°
 °°|°°°
 °°°°°°
 MUST HAVE DEBUG SERIAL SET TO 9600 Baud
 MUST HAVE BT SERIAL SET TO 38400 Baud

  * AT 			    +NAME:itead
 * AT+VERSION 	    +VERSION:hc01.comV2.1
 * AT+ADDR		    +ADDR:2016:4:76101
 * AT+UART		    +UART:9600,0,0
 * AT+NAME=<param>  OK set the module name
 * AT+NAME?         +NAME:<Param> Get the module name
 * AT+ORGL          OK - restore to defaults
 * AT+RESET         OK - reset
 *
 * AT+ROLE		    +ROLE:0 (1=master, 0=slave)
 * AT+PSWD		    +PSWD:1234 (pairing PIN)

*/
#include <SoftwareSerial.h>

#define IN_BUFF_SIZE 100
char buff[IN_BUFF_SIZE];


// The jumpers on BT board are set to 4TX and 5RX. 
// They are reversed on serial since RX from BT gets TX to serial
SoftwareSerial btSerial(5, 4); //RX,TX


// the setup function runs once when you press reset or power the board
void setup() {
    //Need 38400 for BT and 9600 for serial to send AT commands
    //strange because BT AT cmd shows BT baud is 9600. 
    SetupCommunications(9600, 38400);
}


// the loop function runs over and over again until power down or reset
void loop() {
    int count = Serial.available();
    if (count > 0) {
        Serial.readBytes(buff, count);
        btSerial.write(buff, count);
    }

    count = btSerial.available();
    if (count > 0) {
        btSerial.readBytes(buff, count);
        Serial.write(buff, count);
    }
}


void SetupCommunications(long dbgBaud, long btBaud) {
    Serial.begin(dbgBaud);
    btSerial.begin(btBaud);
    while (!Serial) {
        ; // wait for default serial port to connect. Needed for Native USB only
    }
}


==================================================================================
END OF SECOND PROGRAM
==================================================================================
