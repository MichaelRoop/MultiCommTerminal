//-----------------------------------------------------------------------------
// Name:		ArduinoBluetoothDataTests.ino
// Created:	12/12/2019 3:14:05 PM
// Author:	Michael
//
// Sample to send and receive date to and from Arduino Bluetooth shield 
//
// Written and tested in Visual Studio using Visual Micro
// Tested against Arduino Uno and itea Bluetooth shield with HC-05 module
//
// MUST HAVE BOARD TOGGLED TO DATA
// MUST HAVE BOARD JUMPERS SET FOLLOWING for IO4 TX and IO5 RX
// °°°|°°
// °°|°°°
// °°°°°°
// MUST HAVE DEBUG SERIAL SET TO 9600 Baud
// MUST HAVE BT SERIAL SET TO 38400 Baud
//
// Must pair with Bluetooth first. The Multi Comm Terminal provides that
// functionality
//-----------------------------------------------------------------------------
#include <SoftwareSerial.h>

#ifndef SECTION_DATA
int i = 0;
// The jumpers on BT board are set to 4TX and 5RX. 
// They are reversed on serial since RX from BT gets TX to serial
SoftwareSerial btSerial(5, 4); //RX,TX
bool hasInput = false;
#define IN_BUFF_SIZE 100
char buff[IN_BUFF_SIZE];
unsigned char inIndex = 0;
#endif // !SECTION_DATA


// the setup function runs once when you press reset or power the board
void setup() {
	// There is some strange behaviour when using different baud rates
	SetupCommunications(9600, 38400);
}

// the loop function runs over and over again until power down or reset
void loop() {
	ListenToBTData();
}


// Private helpers
void SetupCommunications(long dbgBaud, long btBaud) {
	btSerial.begin(btBaud);
	Serial.begin(dbgBaud);

	while (!Serial) {
		; // wait for serial port to connect. Needed for Native USB only
	}
	Serial.println("Debug serial active");
	// example had pin 9 set low, then high but does not seem necessary
}


void ListenToBTData() {
	if (btSerial.available() > 0) {
		if (inIndex >= IN_BUFF_SIZE) {
			inIndex = 0;
			Serial.println("Corrupt BT input. Purge buffer");
		}

		buff[inIndex] = (char)btSerial.read();
		if (buff[inIndex] == '\r') {
			Serial.write("CR");
		}
		else if (buff[inIndex] == '\n') {
			Serial.write("LN");
		}
		else {
			Serial.write(buff[inIndex]);
		}

		// Doing \n\r
		if (buff[inIndex] == '\r') {
			Serial.println("Printing msg in buffer");
			hasInput = true;
			Serial.write(buff, inIndex + 1);
			btSerial.write(buff, inIndex + 1);
			memset(buff, 0, IN_BUFF_SIZE);
			inIndex = 0;
		}
		else {
			inIndex++;
			// Wipe out buffer if too long
			if (inIndex >= IN_BUFF_SIZE) {
				inIndex = 0;
				Serial.println("Corrupt BT input. Purge buffer");
			}
			else {
			}
		}
	}
	else {
		if (hasInput) {
			hasInput = false;
		}

		if (i % 50 == 0) {
			Serial.print("No BT msg # ");
			Serial.print((i / 10));
			Serial.println("");
		}
		i++;
		delay(100);
	}
}
